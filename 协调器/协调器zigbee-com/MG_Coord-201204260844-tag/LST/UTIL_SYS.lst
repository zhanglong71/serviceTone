C51 COMPILER V9.00   UTIL_SYS                                                              05/08/2012 16:12:19 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE UTIL_SYS
OBJECT MODULE PLACED IN .\HEX\UTIL_SYS.obj
COMPILER INVOKED BY: C:\Keil\C51\bin\C51.EXE C_UTIL\UTIL_SYS.c LARGE OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -LST\UTIL_SYS.lst) OBJECT(.\HEX\UTIL_SYS.obj)

line level    source

   1          
   2          /*******************************************************************************
   3                  - Chip          : MG2450/2455
   4                  - Vendor                : RadioPulse Inc, 2007.
   5                  - Date          : 2010-03-02
   6                  - Version               : VER 2.10      
   7          
   8                  [2010-03-02] VER 2.10
   9                  - For ZigBeePRO Development Kit V2.10
  10          *******************************************************************************/
  11          
  12          #include "INCLUDE_TOP.h"
  13          #include "INCLUDE_STACK.h"
  14          
  15          #include "C_HAL/PHY.h"
  16          
  17          void Swap_Buffer_4B(UINT8 *pBuf, UINT8 Idx)
  18          {
  19   1              UINT8   Temp;
  20   1              
  21   1              Temp = pBuf[Idx+0];
  22   1              pBuf[Idx+0] = pBuf[Idx+3];
  23   1              pBuf[Idx+3] = Temp;
  24   1      
  25   1              Temp = pBuf[Idx+1];
  26   1              pBuf[Idx+1] = pBuf[Idx+2];
  27   1              pBuf[Idx+2] = Temp;
  28   1      }
  29          
  30          void Swap_Buffer_2B(UINT8 *pBuf, UINT8 Idx)
  31          {
  32   1              UINT8   Temp;
  33   1      
  34   1              Temp = pBuf[Idx+0];
  35   1              pBuf[Idx+0] = pBuf[Idx+1];
  36   1              pBuf[Idx+1] = Temp;
  37   1      }
  38          
  39          
  40          //- RETURN      : 1=Null, 0=Not Null
  41          UINT8 Check_8Byte_Null(UINT8 *pArray)
  42          {
  43   1              UINT8   ResultOR;
  44   1      
  45   1              ResultOR = pArray[0];
  46   1              ResultOR |= pArray[1];
  47   1              ResultOR |= pArray[2];
  48   1              ResultOR |= pArray[3];
  49   1              ResultOR |= pArray[4];
  50   1              ResultOR |= pArray[5];
  51   1              ResultOR |= pArray[6];
  52   1              ResultOR |= pArray[7];
  53   1      
  54   1              if(ResultOR == 0)               return 1;
C51 COMPILER V9.00   UTIL_SYS                                                              05/08/2012 16:12:19 PAGE 2   

  55   1              else                                    return 0;
  56   1      }
  57          
  58          
  59          //- RETURN      : 1=Null, 0=Not Null
  60          /*UINT8 Check_16Byte_Null(UINT8 *pArray)
  61          {
  62                  UINT8   ResultOR;
  63                  UINT8   i;
  64          
  65                  ResultOR = 0x00;
  66                  for(i=0 ; i<16 ; i++)   ResultOR |= pArray[i];
  67          
  68                  if(ResultOR == 0)               return 1;
  69                  else                                    return 0;
  70          }*/
  71          
  72          //- RETURN      : 1=Broadcast, 0=Not
  73          UINT8 Check_8Byte_Broadcast(UINT8 *pArray)
  74          {
  75   1              UINT8   ResultAND;
  76   1              UINT8   i;
  77   1      
  78   1              ResultAND = 0xFF;
  79   1              for(i=0 ; i<8 ; i++)    ResultAND &= pArray[i];
  80   1      
  81   1              if(ResultAND == 0xFF)   return 1;
  82   1              else                                    return 0;
  83   1      }
  84          
  85          
  86          ///////////////////////////////////////////////////////////////////////////////
  87          ///////////////////////////////////////////////////////////////////////////////
  88          
  89          /***********************************************************************************
  90           *
  91           *      NAME            : ZSYS_LQI_TO_COST()
  92           *
  93           *      DESCRIPTION     : Converts a LQI value to "COST" value. "COST" is the unit to classify LQI into 7 steps.
  94           *
  95           *      PARAMETER       : LQI - Link Quality Indication(0~255).
  96           *                      - LQI=255       : 0 dBm
  97           *                      - LOI=178       : -30 dBm
  98           *                      - LQI=153       : -40 dBm
  99           *                      - LQI=127       : -50 dBm
 100           *                      - LQI=102       : -60 dBm
 101           *                      - LQI=76                : -70 dBm
 102           *                      - LQI=51                : -80 dBm
 103           *                      - LQI=25                : -90 dBm 
 104           *
 105           *      RETURN          : "COST" value. (1~7)
 106           *
 107           *      NOTES           : None
 108           *      
 109           ***********************************************************************************/
 110          UINT8 ZSYS_LQI_TO_COST(UINT8 LQI)
 111          {
 112   1              UINT8   Cost;
 113   1      
 114   1              if(LQI > 127)           Cost = 1;               // -50 dBm
 115   1              else if(LQI > 102)      Cost = 2;               // -60 dBm
 116   1              else if(LQI > 76)       Cost = 3;               // -70 dBm
C51 COMPILER V9.00   UTIL_SYS                                                              05/08/2012 16:12:19 PAGE 3   

 117   1              else if(LQI > 51)       Cost = 4;               // -80 dBm
 118   1              else if(LQI > 38)       Cost = 5;               // -85 dBm
 119   1              else if(LQI > 25)       Cost = 6;               // -90 dBm
 120   1              else                    Cost = 7;       
 121   1      
 122   1              return  Cost;
 123   1      }
 124          
 125          /***********************************************************************************
 126           *
 127           *      NAME            : ZSYS_RANDOM_GEN_SEED()
 128           *
 129           *      DESCRIPTION     : Initializes the random generator with the seed value
 130           *
 131           *      PARAMETER       : RandomSeed - seed for initialization
 132           *
 133           *      RETURN          : None
 134           *
 135           *      NOTES           : None
 136           *      
 137           ***********************************************************************************/
 138          void ZSYS_RANDOM_GEN_SEED(UINT16 RandomSeed)
 139          {
 140   1              srand(RandomSeed);
 141   1      }
 142          
 143          /***********************************************************************************
 144           *
 145           *      NAME            : ZSYS_RANDOM_GEN_GET()
 146           *
 147           *      DESCRIPTION     : Acquires a 16-bit random value
 148           *
 149           *      PARAMETER       : MaskAnd - The generated random number is AND-ed with this before returning.
 150           *
 151           *      RETURN          : 16-bit random number
 152           *
 153           *      NOTES           : None
 154           *      
 155           ***********************************************************************************/
 156          UINT16 ZSYS_RANDOM_GEN_GET(UINT16 MaskAnd)
 157          {
 158   1              UINT16  random_return;
 159   1      
 160   1              random_return = rand() & MaskAnd;
 161   1              random_return = random_return + 0x08;
 162   1              
 163   1              return  random_return;          // Min=8, Max=8 + MaskAnd
 164   1      }
 165          
 166          /***********************************************************************************
 167           *
 168           *      NAME            : ZSYS_SET_SHORT_ADDR()
 169           *
 170           *      DESCRIPTION     : Set network address
 171           *
 172           *      PARAMETER       : ShortAddr - network address to set
 173           *
 174           *      RETURN          : None
 175           *
 176           *      NOTES           : None
 177           *      
 178           ***********************************************************************************/
C51 COMPILER V9.00   UTIL_SYS                                                              05/08/2012 16:12:19 PAGE 4   

 179          void ZSYS_SET_SHORT_ADDR(UINT16 ShortAddr)
 180          {
 181   1              NIB.nwkNetworkAddr = ShortAddr;
 182   1              MPIB.macShortAddr = ShortAddr;
 183   1              ZHAL_SHORT_ADDR_SET(MPIB.macShortAddr);
 184   1      }
 185          
 186          /***********************************************************************************
 187           *
 188           *      NAME            : ZSYS_SET_PAN_ID()
 189           *
 190           *      DESCRIPTION     : Set PAN identifier
 191           *
 192           *      PARAMETER       : PanID - PAN identifier to set
 193           *
 194           *      RETURN          : None
 195           *
 196           *      NOTES           : None
 197           *      
 198           ***********************************************************************************/
 199          void ZSYS_SET_PAN_ID(UINT16 PanID)
 200          {
 201   1              NIB.nwkPanID = PanID;
 202   1              MPIB.macPANId = PanID;
 203   1              ZHAL_PAN_ID_SET(MPIB.macPANId);
 204   1      }
 205          
 206          /***********************************************************************************
 207           *
 208           *      NAME            : ZSYS_SET_CHANNEL()
 209           *
 210           *      DESCRIPTION     : Set RF channel
 211           *
 212           *      PARAMETER       : Channel - RF channel to set
 213           *
 214           *      RETURN          : None
 215           *
 216           *      NOTES           : None
 217           *      
 218           ***********************************************************************************/
 219          void ZSYS_SET_CHANNEL(UINT8 Channel)
 220          {
 221   1              PPIB.phyCurrentChannel = Channel;
 222   1              ZHAL_CHANNEL_SET(PPIB.phyCurrentChannel);
 223   1      }
 224          
 225          /***********************************************************************************
 226           *
 227           *      NAME            : ZSYS_SET_EPID()
 228           *
 229           *      DESCRIPTION     : Set Extended PAN identifier(EPID)
 230           *
 231           *      PARAMETER       : pEPID - pointer to EPID to set
 232           *
 233           *      RETURN          : None
 234           *
 235           *      NOTES           : None
 236           *      
 237           ***********************************************************************************/
 238          void ZSYS_SET_EPID(UINT8 *pEPID)
 239          {
 240   1              memcpy(NIB.nwkEPID, pEPID, 8);
C51 COMPILER V9.00   UTIL_SYS                                                              05/08/2012 16:12:19 PAGE 5   

 241   1      }
 242          
 243          /***********************************************************************************
 244           *
 245           *      NAME            : ZSYS_GET_SHORT_ADDR()
 246           *
 247           *      DESCRIPTION     : Get network address
 248           *
 249           *      PARAMETER       : None
 250           *
 251           *      RETURN          : Network address
 252           *
 253           *      NOTES           : None
 254           *      
 255           ***********************************************************************************/
 256          /*UINT16 ZSYS_GET_SHORT_ADDR()
 257          {
 258                  return  NIB.nwkNetworkAddr;
 259          }*/
 260          
 261          /***********************************************************************************
 262           *
 263           *      NAME            : ZSYS_GET_PAN_ID()
 264           *
 265           *      DESCRIPTION     : Get PAN identifier
 266           *
 267           *      PARAMETER       : None
 268           *
 269           *      RETURN          : PAN identifier
 270           *
 271           *      NOTES           : None
 272           *      
 273           ***********************************************************************************/
 274          //UINT16 ZSYS_GET_PAN_ID()
 275          //{
 276          //      return  NIB.nwkPanID;
 277          //}
 278          
 279          /***********************************************************************************
 280           *
 281           *      NAME            : ZSYS_GET_CHANNEL()
 282           *
 283           *      DESCRIPTION     : Get RF channel
 284           *
 285           *      PARAMETER       : None
 286           *
 287           *      RETURN          : RF channel
 288           *
 289           *      NOTES           : None
 290           *      
 291           ***********************************************************************************/
 292          UINT8 ZSYS_GET_CHANNEL()
 293          {
 294   1              return  PPIB.phyCurrentChannel;
 295   1      }
 296          
 297          /***********************************************************************************
 298           *
 299           *      NAME            : RemoveWarning_UTIL_SYS()
 300           *
 301           *      DESCRIPTION     : Pretends to call functions in this file to remove warnings of Keil Compiler.
 302           *              In fact, the functions are not called because "Call" is 0.
C51 COMPILER V9.00   UTIL_SYS                                                              05/08/2012 16:12:19 PAGE 6   

 303           *
 304           *      PARAMETER       : None
 305           *
 306           *      RETURN          : None
 307           *
 308           *      NOTES           : A warning that indicates UNCALLED_SEGMENT about RemoveWarning_UTIL_SYS()
 309           *              is generated when compiled. This warning is ignored.
 310           *      
 311           ***********************************************************************************/
 312          /*void RemoveWarning_UTIL_SYS()
 313          {
 314                  UINT8   Call;
 315          
 316                  Call = 0;
 317          
 318                  if(Call)
 319                  {
 320                          Swap_Buffer_4B(0,0);
 321                          Swap_Buffer_2B(0,0);
 322                          Check_8Byte_Null(0);
 323                          Check_16Byte_Null(0);
 324                          Check_8Byte_Broadcast(0);
 325                          ZSYS_RANDOM_GEN_SEED(0);
 326                          ZSYS_RANDOM_GEN_GET(0);
 327                          ZSYS_SET_CHANNEL(0);
 328                          ZSYS_SET_SHORT_ADDR(0);
 329                          ZSYS_SET_PAN_ID(0);
 330                          ZSYS_SET_EPID(0);       
 331                          ZSYS_GET_SHORT_ADDR();
 332                          ZSYS_GET_PAN_ID();
 333                          ZSYS_GET_CHANNEL();
 334                  }
 335          }*/
 336          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    438    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
