C51 COMPILER V9.01   ADC                                                                   07/18/2011 22:11:09 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\HEX\ADC.obj
COMPILER INVOKED BY: c:\Keil\C51\BIN\C51.EXE C_HAL\ADC.c LARGE OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND PRINT(.\LST\AD
                    -C.lst) OBJECT(.\HEX\ADC.obj)

line level    source

   1          /*******************************************************************************
   2                  - Chip          : MG2450/2455
   3                  - Vendor                : RadioPulse Inc, 2007.
   4                  - Date          : 2009-07-15
   5                  - Version               : VER 1.81
   6          
   7                  [2009-07-15] VER 1.81
   8                  - In ZHAL_ADC_SET(), the waiting time for SADC-DONE is too short.
   9                          + for(ib=0 ; ib<200 ; ib++) ==> for(iw=0 ; iw<400 ; iw++)
  10          
  11                  [2008-04-01] VER 1.80
  12                  - BatteryMonitoring is not needed. So, ZSYS_ADC_GET() is optimized.
  13          
  14                  [2008-03-06] VER 1.70
  15                  - ZHAL_ADC_SET() is modified to support BatteryMonitoring
  16                  - ZSYS_ADC_GET() is modified to support BatteryMonitoring
  17                  - new function ZSYS_ADC_CALIB_GET() is added
  18          
  19                  [2007-12-11] VER 1.60
  20                  - for() counter is changed in ZHAL_ADC_SET() : 400 ==> 200
  21                          (Because, Core Clock is changed from 16MHz to 8MHz)
  22                  
  23                  [2007-11-07] VER 1.50
  24                  - Initial Version
  25          *******************************************************************************/
  26          
  27          
  28          #include "INCLUDE_TOP.h"
  29          
  30          //- Ref : Reference Voltage
  31          //      0       : Internal BGR Voltage.         TOP=1.2V,       BOT=0.3V,       VMID=0.75V
  32          //      1       : TOP_BGR.                      TOP=BGR,        BOT=0V
  33          //      2       : ACH2, ACH3.           TOP=ACH2,       BOT=ACH3,       VMID=0.75V
  34          //      3       : VDD, GND.                     TOP=1.5V,       BOT=0V
  35          
  36          //- AdcChan     : ADC Channel
  37          //      0       : ACH0
  38          //      1       : ACH1
  39          //      2       : ACH2
  40          //      3       : ACH3
  41          //      4       : difference of ACH0 and ACH1
  42          //      5       : difference of ACH2 and ACH3
  43          //      6       : Temprature Sensor
  44          //      7       : Battery Monitoring
  45          //      8       : GND(for Calibration)
  46          //      9       : VDD(for Calibration)
  47          UINT8 ZHAL_ADC_SET(UINT8 Ena, UINT8 Ref, UINT8 AdcChan)
  48          {
  49   1              UINT8   ERR;
  50   1              //UINT8 ib;             // ADC v1.80
  51   1              UINT16  iw;             // ADC v1.81
  52   1      
  53   1              xSADCCON = AdcChan & 0x0F;
  54   1              xSADCCON |= (Ref & 0x03) << 4;
C51 COMPILER V9.01   ADC                                                                   07/18/2011 22:11:09 PAGE 2   

  55   1      
  56   1              ERR = 1;
  57   1              if(Ena)
  58   1              {
  59   2                      xSADCCON &= 0xBF;               // clear bit[6]. 2008-03-06
  60   2                      xSADCCON |= 0x80;               // set bit[7]
  61   2      
  62   2                      //for(ib=0 ; ib<200 ; ib++)             // ADC v1.80
  63   2                      for(iw=0 ; iw<400 ; iw++)               // ADC v1.81
  64   2                      {                       
  65   3                              if(xSADCCON & 0x40)
  66   3                              {
  67   4                                      ERR = 0;
  68   4                                      break;
  69   4                              }
  70   3                      }
  71   2      
  72   2                      xSADCCON &= 0xBF;               // clear bit[6]
  73   2              }
  74   1              else
  75   1              {
  76   2                      ERR = 0;
  77   2              }
  78   1      
  79   1              return  ERR;
  80   1      }
  81          
  82          UINT16 ZHAL_ADC_GET()
  83          {
  84   1              UINT16  SADC_OUT;
  85   1      
  86   1              SADC_OUT = (xSADCVALH << 8) | xSADCVALL ;
  87   1      
  88   1              return SADC_OUT;
  89   1      }
  90          
  91          //- AdcChan     : ADC Channel
  92          //      0       : ACH0
  93          //      1       : ACH1
  94          //      2       : ACH2
  95          //      3       : ACH3
  96          //      4       : difference of ACH0 and ACH1
  97          //      5       : difference of ACH2 and ACH3
  98          //      6       : Temprature Sensor
  99          //      7       : Battery Monitoring
 100          //- RETURN      : ADC Output. If 0xFFFF, it indicates error.
 101          UINT16 ZSYS_ADC_GET(UINT8 AdcChan)
 102          {
 103   1              UINT16          ADC_READ;
 104   1              //UINT8         _ET0;           // deleted in Ver1.80 of ADC.C
 105   1      
 106   1              //_ET0 = ET0;                   // deleted in Ver1.80 of ADC.C
 107   1              //ET0 = 0;                              // deleted in Ver1.80 of ADC.C
 108   1      
 109   1              ZHAL_ADC_SET(1, 0, AdcChan);
 110   1              if(ZHAL_ADC_SET(1, 0, AdcChan))
 111   1              {
 112   2                      ADC_READ = 0xFFFF;
 113   2              }
 114   1              else
 115   1              {
 116   2                      ADC_READ = ZHAL_ADC_GET();
C51 COMPILER V9.01   ADC                                                                   07/18/2011 22:11:09 PAGE 3   

 117   2              }
 118   1      
 119   1              //ZHAL_ADC_SET(1, 0, 7);        // deleted in Ver1.80 of ADC.C
 120   1              //ET0 = _ET0;                   // deleted in Ver1.80 of ADC.C
 121   1      
 122   1              return  ADC_READ;
 123   1      }
 124          
 125          UINT8 ZSYS_ADC_CALIB_GET(UINT8 AdcChan)
 126          {
 127   1              UINT16  MaxAdcValue;
 128   1              UINT16  MinAdcValue;
 129   1              UINT16  AbsAdcValue;
 130   1              UINT16  RelAdcValue;
 131   1      
 132   1              UINT32  Tmp32;
 133   1      
 134   1              MaxAdcValue = ZSYS_ADC_GET(9);
 135   1              if(MaxAdcValue == 0xFFFF)               return 0xFFFF;
 136   1      
 137   1              MinAdcValue = ZSYS_ADC_GET(8);
 138   1              if(MinAdcValue == 0xFFFF)               return 0xFFFF;
 139   1              
 140   1              // Compare MinAdcValue vs MaxAdcValue
 141   1              if(MinAdcValue > MaxAdcValue)
 142   1              {
 143   2                      return 0xFFFF;
 144   2              }
 145   1      
 146   1              AbsAdcValue = ZSYS_ADC_GET(AdcChan);
 147   1              if(AbsAdcValue == 0xFFFF)       return 0xFFFF;
 148   1      
 149   1              // Check MinAdcValue vs AbsAdcValue
 150   1              if(MinAdcValue > AbsAdcValue)
 151   1              {
 152   2                      return 0x0000;
 153   2              }
 154   1      
 155   1              // Check MaxAdcValue vs AbsAdcValue
 156   1              if(MaxAdcValue < AbsAdcValue)
 157   1              {
 158   2                      AbsAdcValue = MaxAdcValue; 
 159   2              }
 160   1      
 161   1              // Get RelAdcValue
 162   1              Tmp32 = (AbsAdcValue - MinAdcValue);
 163   1              Tmp32 <<= 8;
 164   1              Tmp32 = Tmp32 / (MaxAdcValue - MinAdcValue);
 165   1              
 166   1              RelAdcValue = (UINT16) Tmp32;
 167   1              if(RelAdcValue & 0xFF00)        RelAdcValue = 0xFF;     // if RelAdcValue > 0x00FF --> Max Value 0xFF
 168   1              
 169   1              return  RelAdcValue;
 170   1      }
 171          
 172          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    335    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
C51 COMPILER V9.01   ADC                                                                   07/18/2011 22:11:09 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
