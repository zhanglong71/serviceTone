C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ISR_USER
OBJECT MODULE PLACED IN .\HEX\ISR_USER.obj
COMPILER INVOKED BY: C:\Keil\C51\bin\C51.EXE C_USER\ISR_USER.c LARGE OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -LST\ISR_USER.lst) OBJECT(.\HEX\ISR_USER.obj)

line level    source

   1          
   2          
   3          /*******************************************************************************
   4                  - Chip          : MG2450/2455
   5                  - Vendor                : RadioPulse Inc, 2007.
   6                  - Date          : 2010-03-02
   7                  - Version               : VER 2.10      
   8          
   9                  [2010-03-02] VER 2.10
  10                  - For ZigBeePRO Development Kit V2.10
  11          *******************************************************************************/
  12          
  13          #include "INCLUDE_TOP.h"
  14          
  15          #include "C_HAL/UART.h"
  16          
  17                  UINT8   INT_EXT0 = 0;
  18          /***********************************************************************************
  19           *
  20           *      NAME            : EXT0_ISR()
  21           *
  22           *      DESCRIPTION     : Interrupt Service Routine(ISR) of External Interrupt 0
  23           *
  24           *      PARAMETER       : None
  25           *
  26           *      RETURN          : None
  27           *
  28           *      NOTES           : None
  29           *      
  30           ***********************************************************************************/   
  31          void EXT0_ISR(void) interrupt 0 
  32          {
  33   1              INT_EXT0 = 1;   
  34   1      }
  35          
  36          
  37                  UINT8   INT_EXT1 = 0;
  38          /***********************************************************************************
  39           *
  40           *      NAME            : EXT1_ISR()
  41           *
  42           *      DESCRIPTION     : Interrupt Service Routine(ISR) of External Interrupt 1
  43           *
  44           *      PARAMETER       : None
  45           *
  46           *      RETURN          : None
  47           *
  48           *      NOTES           : None
  49           *      
  50           ***********************************************************************************/   
  51          void EXT1_ISR(void) interrupt 2 
  52          {
  53   1              INT_EXT1 = 1;
  54   1      }
C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 2   

  55          
  56                  UINT16  UserTimer0 = 0;
  57                  UINT16  UserTimer1 = 0;
  58                  UINT16  UserTimer2 = 0;
  59                  UINT16  UserTimer3 = 0;
  60          
  61                  UINT8   Timer1_Reload_TH1;
  62                  UINT8   Timer1_Reload_TL1;
  63          
  64                  UINT8   Timer_comDelay;
  65          
  66          
  67          /***********************************************************************************
  68           *
  69           *      NAME            : TIMER1_ISR()
  70           *
  71           *      DESCRIPTION     : Interrupt Service Routine(ISR) of TIMER1
  72           *
  73           *      PARAMETER       : None
  74           *
  75           *      RETURN          : None
  76           *
  77           *      NOTES           : None
  78           *      
  79           ***********************************************************************************/
  80          void TIMER1_ISR(void) interrupt 3 
  81          {
  82   1              TH1 = Timer1_Reload_TH1;
  83   1              TL1 = Timer1_Reload_TL1;
  84   1      
  85   1              if(UserTimer0)  UserTimer0--;
  86   1              if(UserTimer1)  UserTimer1--;
  87   1              if(UserTimer2)  UserTimer2--;
  88   1              if(UserTimer3)  UserTimer3--;
  89   1              
  90   1              if(Timer_comDelay) Timer_comDelay--;
  91   1      }
  92          
  93          /***********************************************************************************
  94           *
  95           *      NAME            : ZSYS_SET_UserTimer()
  96           *
  97           *      DESCRIPTION     : In TIMER1_ISR(), there are 4 virtual count-down timers for the application
  98           *              This function sets a timer among them.
  99           *
 100           *      PARAMETER       : 
 101           *              TimerNum - The number of a virtual timer. 0 ~ 3.
 102           *              TickCount - The number of ticks before expiration.
 103           *
 104           *      RETURN          : None
 105           *
 106           *      NOTES           : None
 107           *      
 108           ***********************************************************************************/
 109          void ZSYS_SET_UserTimer(UINT8 TimerNum, UINT16 TickCount)
 110          {
 111   1              UINT8   _ET1;
 112   1      
 113   1              _ET1 = ET1;
 114   1              ET1 = 0;
 115   1      
 116   1              if(TimerNum == 0)               UserTimer0 = TickCount;
C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 3   

 117   1              else if(TimerNum == 1)  UserTimer1 = TickCount;
 118   1              else if(TimerNum == 2)  UserTimer2 = TickCount;
 119   1              else if(TimerNum == 3)  UserTimer3 = TickCount;
 120   1      
 121   1              else if(TimerNum == 4)  Timer_comDelay = TickCount;
 122   1              
 123   1              ET1 = _ET1;
 124   1      }
 125          
 126          
 127          /***********************************************************************************
 128           *
 129           *      NAME            : ZSYS_SET_UserTimer()
 130           *
 131           *      DESCRIPTION     : gets the remaining tick number of a specified virtual timer
 132           *
 133           *      PARAMETER       : TimerNum - The number of a virtual timer. 0 ~ 3.
 134           *
 135           *      RETURN          : Number of remaining ticks
 136           *
 137           *      NOTES           : None
 138           *      
 139           ***********************************************************************************/
 140          UINT16 ZSYS_GET_UserTimer(UINT8 TimerNum)
 141          {
 142   1              UINT16  ReturnTick;
 143   1      
 144   1              UINT8   _ET1;
 145   1      
 146   1              _ET1 = ET1;
 147   1              ET1 = 0;
 148   1      
 149   1              if(TimerNum == 0)               ReturnTick = UserTimer0;
 150   1              else if(TimerNum == 1)  ReturnTick = UserTimer1;
 151   1              else if(TimerNum == 2)  ReturnTick = UserTimer2;
 152   1              else if(TimerNum == 3)  ReturnTick = UserTimer3;
 153   1              else if(TimerNum == 4)  ReturnTick = Timer_comDelay;
 154   1              
 155   1              else                                            ReturnTick = 0;
 156   1      
 157   1              ET1 = _ET1;
 158   1      
 159   1              return  ReturnTick;
 160   1      }
 161          
 162          
 163          /***********************************************************************************
 164           *
 165           *      NAME            : TIMER3_ISR()
 166           *
 167           *      DESCRIPTION     : Interrupt Service Routine(ISR) of TIMER3
 168           *
 169           *      PARAMETER       : None
 170           *
 171           *      RETURN          : None
 172           *
 173           *      NOTES           : None
 174           *      
 175           ***********************************************************************************/
 176          void TIMER3_ISR(void) interrupt 11
 177          {
 178   1              EXIF &= 0x7F;
C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 4   

 179   1      }
 180          
 181          
 182          /***********************************************************************************
 183           *
 184           *      NAME            : UART0_ISR()
 185           *
 186           *      DESCRIPTION     : Interrupt Service Routine(ISR) of UART0
 187           *
 188           *      PARAMETER       : None
 189           *
 190           *      RETURN          : None
 191           *
 192           *      NOTES           : None
 193           *      
 194           ***********************************************************************************/
 195          void UART0_ISR (void) interrupt 4
 196          {
 197   1      #if ENABLE_UART0
 198   1              UINT8   INT_ID;
 199   1              UINT8   PendLen;
 200   1              UINT8   i;
 201   1              UINT8   NextNum;
 202   1      
 203   1              INT_ID = (xU0_IIR >> 1) & 0x07;
 204   1              
 205   1              if(INT_ID == 0x02)              // Received Data Available
 206   1              {
 207   2                      for(i=0 ; i<8 ; i++)
 208   2                      {
 209   3                              NextNum = (r0_in+1) & (UART0_RXBUF_SIZE-1);
 210   3                              if(NextNum != r0_out)
 211   3                              {
 212   4                                      r0buf[r0_in] = xU0_RBR;
 213   4                                      r0_in = NextNum;
 214   4                              }
 215   3                              else            PendLen = xU0_RBR;
 216   3                      }
 217   2              }
 218   1              else if(INT_ID == 0x06) // Character Timeout
 219   1              {
 220   2                      // Timeout Interrupt
 221   2                      NextNum = (r0_in+1) & (UART0_RXBUF_SIZE-1);
 222   2                      if(NextNum != r0_out)
 223   2                      {
 224   3                              r0buf[r0_in] = xU0_RBR;
 225   3                              r0_in = NextNum;
 226   3                      }
 227   2                      else            PendLen = xU0_RBR;      
 228   2              }
 229   1              else if(INT_ID == 0x01) // Tx Holding Empty
 230   1              {
 231   2                      t0_fifo_empty = 1;
 232   2                      if(t0_in != t0_out)
 233   2                      {
 234   3                              xU0_THR = t0buf[t0_out];
 235   3                              t0_out++;
 236   3                              t0_out &= (UART0_TXBUF_SIZE-1);                 
 237   3                              t0_fifo_empty = 0;
 238   3                      }       
 239   2              }
 240   1              else if(INT_ID == 0x03) // Receiver Line Status
C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 5   

 241   1              {               
 242   2                      NextNum = xU0_LSR;
 243   2              }
 244   1              else if(INT_ID == 0x00) // Modem Status
 245   1              {
 246   2                      NextNum = xU0_MSR;
 247   2              }
 248   1              else                                            // Unknown ???
 249   1              {
 250   2              }       
 251   1      #else
                      UINT8   INT_ID;
                      
                      INT_ID = (xU0_IIR >> 1) & 0x07;
              #endif
 256   1      }
 257          
 258          
 259          /***********************************************************************************
 260           *
 261           *      NAME            : UART1_ISR()
 262           *
 263           *      DESCRIPTION     : Interrupt Service Routine(ISR) of UART1
 264           *
 265           *      PARAMETER       : None
 266           *
 267           *      RETURN          : None
 268           *
 269           *      NOTES           : None
 270           *      
 271           ***********************************************************************************/
 272          void UART1_ISR (void) interrupt 7
 273          {
 274   1      #if (ENABLE_UART1)
 275   1              UINT8   INT_ID;
 276   1              UINT8   PendLen;
 277   1              UINT8   i;
 278   1              UINT8   NextNum;
 279   1      
 280   1              INT_ID = (xU1_IIR >> 1) & 0x07;
 281   1              
 282   1              if(INT_ID == 0x02)              // Received Data Available
 283   1              {
 284   2                      for(i=0 ; i<8 ; i++)
 285   2                      {
 286   3                              NextNum = (r1_in+1) & (UART1_RXBUF_SIZE-1);
 287   3                              if(NextNum != r1_out)
 288   3                              {
 289   4                                      r1buf[r1_in] = xU1_RBR;
 290   4                                      r1_in = NextNum;
 291   4                              }
 292   3                              else            PendLen = xU1_RBR;
 293   3                      }
 294   2              }
 295   1              else if(INT_ID == 0x06) // Character Timeout
 296   1              {
 297   2                      // Timeout Interrupt
 298   2                      NextNum = (r1_in+1) & (UART1_RXBUF_SIZE-1);
 299   2                      if(NextNum != r1_out)
 300   2                      {
 301   3                              r1buf[r1_in] = xU1_RBR;
 302   3                              r1_in = NextNum;
C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 6   

 303   3                      }
 304   2                      else            PendLen = xU1_RBR;
 305   2              }
 306   1              else if(INT_ID == 0x01) // Tx Holding Empty
 307   1              {               
 308   2                      t1_fifo_empty = 1;
 309   2                      if(t1_in != t1_out)             
 310   2                      {
 311   3                              xU1_THR = t1buf[t1_out];
 312   3                              t1_out++;
 313   3                              t1_out &= (UART1_TXBUF_SIZE-1);                 
 314   3                              t1_fifo_empty = 0;
 315   3                      }                               
 316   2              }
 317   1              else if(INT_ID == 0x03) // Receiver Line Status
 318   1              {               
 319   2                      NextNum = xU1_LSR;
 320   2              }
 321   1              else if(INT_ID == 0x00) // Modem Status
 322   1              {
 323   2                      NextNum = xU1_MSR;
 324   2              }
 325   1              else                                            // Unknown ???
 326   1              {
 327   2              }       
 328   1      #else
                      UINT8   INT_ID;
              
                      INT_ID = (xU1_IIR >> 1) & 0x07;
              #endif
 333   1      }
 334          
 335          
 336                  UINT8   INT_AES = 0;
 337          /***********************************************************************************
 338           *
 339           *      NAME            : AES_ISR()
 340           *
 341           *      DESCRIPTION     : Interrupt Service Routine(ISR) of H/W AES Block.
 342           *
 343           *      PARAMETER       : None
 344           *
 345           *      RETURN          : None
 346           *
 347           *      NOTES           : None
 348           *      
 349           ***********************************************************************************/   
 350          void AES_ISR(void) interrupt 10 
 351          {       
 352   1              EXIF &= 0xBF; 
 353   1              INT_AES = 1;
 354   1      }
 355          
 356          
 357                  UINT8   INT_RTC = 0;
 358          /***********************************************************************************
 359           *
 360           *      NAME            : RTC_ISR()
 361           *
 362           *      DESCRIPTION     : Interrupt Service Routine(ISR) of RTC
 363           *
 364           *      PARAMETER       : None
C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 7   

 365           *
 366           *      RETURN          : None
 367           *
 368           *      NOTES           : None
 369           *      
 370           ***********************************************************************************/
 371          void RTC_ISR(void) interrupt 12
 372          {       
 373   1              xPDM |= 0x02;           // Prevent Continuos Interrupt
 374   1              RTCIF = 0;
 375   1              INT_RTC = 1;
 376   1      }
 377          
 378                  UINT8   INT_SPI = 0;
 379                  UINT8   SPI_RD_DATA;
 380                  UINT8     SPI_RD_NUM=0;
 381                  UINT8   SPI_RD_BUFF[4];
 382          /***********************************************************************************
 383           *
 384           *      NAME            : SPI_ISR()
 385           *
 386           *      DESCRIPTION     : Interrupt Service Routine(ISR) of SPI
 387           *
 388           *      PARAMETER       : None
 389           *
 390           *      RETURN          : None
 391           *
 392           *      NOTES           : None
 393           *      
 394           ***********************************************************************************/
 395          void SPI_ISR(void) interrupt 13
 396          {       
 397   1              INT_SPI = 1;
 398   1              while (1)
 399   1              {
 400   2                      SPI_RD_DATA = xSPDR;
 401   2                      if(SPI_RD_NUM < 4)      SPI_RD_BUFF[SPI_RD_NUM] = SPI_RD_DATA;
 402   2                      SPI_RD_NUM++;
 403   2                      if(xSPSR & 0x01)        break;  // Read FIFO Empty
 404   2              }
 405   1      
 406   1              if(SPI_RD_NUM > 4)      SPI_RD_NUM = 0; // Error case
 407   1              xSPSR = 0x00;
 408   1      }
 409          
 410          
 411          /***********************************************************************************
 412           *
 413           *      NAME            : VOICE_ISR()
 414           *
 415           *      DESCRIPTION     : Interrupt Service Routine(ISR) of Voice DMA
 416           *
 417           *      PARAMETER       : None
 418           *
 419           *      RETURN          : None
 420           *
 421           *      NOTES           : None
 422           *      
 423           ***********************************************************************************/
 424          void VOICE_ISR(void) interrupt 14 
 425          {
 426   1      }
C51 COMPILER V9.00   ISR_USER                                                              05/08/2012 16:12:19 PAGE 8   

 427          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    914    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     22    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
